Assignment 1: Network Scanning Using Nmap
sudo apt install nmap  # for Debian/Ubuntu
https://nmap.org/download.html #for windows

echo "Step 1: Discovering live hosts in local network"
nmap -sn 192.168.1.0/24

echo "Step 2: Scanning ports on a live host"
nmap 192.168.1.5

echo "Step 3: Getting service versions"
nmap -sV 192.168.1.5

echo "Step 4: OS Detection"
nmap -O 192.168.1.5

echo "Step 5: Aggressive Scan"
nmap -A 192.168.1.5

echo "Scan results saved to output.txt"
nmap -A 192.168.1.5 -oN output.txt

-----------------------------------------------------------------------------------

Assignment 2: Exploring the Role and Implementation of SSL Certificates in Secure Communication

 generate_ssl.sh
#!/bin/bash

echo "Generating 2048-bit RSA Private Key..."
openssl genrsa -out server.key 2048

echo "Creating Certificate Signing Request (CSR)..."
openssl req -new -key server.key -out server.csr \
    -subj "/C=IN/ST=Maharashtra/L=Mumbai/O=College/OU=Cybersecurity/CN=localhost"

echo "Generating Self-Signed SSL Certificate (Valid for 1 year)..."
openssl x509 -req -days 365 -in server.csr -signkey server.key -out server.crt

echo "Certificate and Key generated:"
echo " - server.key"
echo " - server.crt"
echo " - server.csr"

#make it execuatble 
chmod +x generate_ssl.sh

#run it
./generate_ssl.sh

#server.py
import http.server
import ssl

PORT = 4443
Handler = http.server.SimpleHTTPRequestHandler

httpd = http.server.HTTPServer(('localhost', PORT), Handler)
httpd.socket = ssl.wrap_socket(httpd.socket,
                               keyfile="server.key",
                               certfile='server.crt',
                               server_side=True)

print(f"Serving on https://localhost:{PORT}")
httpd.serve_forever()

python3 server.py
https://localhost:4443
curl -k https://localhost:4443
---------------------------------------------------------------------------------------




