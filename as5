#Assignment 5: Encrypt & Decrypt Using the Playfair Cipher

def generate_key_matrix(key):
    key = key.upper().replace("J", "I")
    matrix = []
    used = set()

    for char in key:
        if char not in used and char.isalpha():
            matrix.append(char)
            used.add(char)

    for char in "ABCDEFGHIKLMNOPQRSTUVWXYZ":
        if char not in used:
            matrix.append(char)
            used.add(char)

    return [matrix[i:i+5] for i in range(0, 25, 5)]

def find_position(matrix, char):
    for row in range(5):
        for col in range(5):
            if matrix[row][col] == char:
                return row, col
    return None

def prepare_text(text):
    text = text.upper().replace("J", "I").replace(" ", "")
    i = 0
    result = ""
    while i < len(text):
        a = text[i]
        b = text[i + 1] if (i + 1 < len(text)) else 'X'

        if a == b:
            result += a + 'X'
            i += 1
        else:
            result += a + b
            i += 2
    if len(result) % 2 != 0:
        result += 'X'
    return result

def encrypt_pair(a, b, matrix):
    row1, col1 = find_position(matrix, a)
    row2, col2 = find_position(matrix, b)

    if row1 == row2:
        return matrix[row1][(col1 + 1) % 5] + matrix[row2][(col2 + 1) % 5]
    elif col1 == col2:
        return matrix[(row1 + 1) % 5][col1] + matrix[(row2 + 1) % 5][col2]
    else:
        return matrix[row1][col2] + matrix[row2][col1]

def decrypt_pair(a, b, matrix):
    row1, col1 = find_position(matrix, a)
    row2, col2 = find_position(matrix, b)

    if row1 == row2:
        return matrix[row1][(col1 - 1) % 5] + matrix[row2][(col2 - 1) % 5]
    elif col1 == col2:
        return matrix[(row1 - 1) % 5][col1] + matrix[(row2 - 1) % 5][col2]
    else:
        return matrix[row1][col2] + matrix[row2][col1]

def encrypt(text, matrix):
    text = prepare_text(text)
    return ''.join([encrypt_pair(text[i], text[i+1], matrix) for i in range(0, len(text), 2)])

def decrypt(cipher_text, matrix):
    return ''.join([decrypt_pair(cipher_text[i], cipher_text[i+1], matrix) for i in range(0, len(cipher_text), 2)])

# Run Example
if __name__ == "__main__":
    key = input("Enter key: ")
    matrix = generate_key_matrix(key)

    print("\nKey Matrix:")
    for row in matrix:
        print(row)

    text = input("\nEnter text to encrypt: ")
    cipher = encrypt(text, matrix)
    print("Encrypted:", cipher)

    decrypted = decrypt(cipher, matrix)
    print("Decrypted:", decrypted)
